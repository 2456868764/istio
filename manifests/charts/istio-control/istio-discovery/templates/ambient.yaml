apiVersion: v1
kind: ServiceAccount
metadata:
  name: "uproxy"
  namespace: {{ .Release.Namespace }}
---
{{- if eq .Values.uproxyType "kind" }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: uproxy
  namespace: istio-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: uproxy
  namespace: istio-system
spec:
  selector:
    matchLabels:
      app: uproxy
  template:
    metadata:
      labels:
        app: uproxy
        ambient-type: uproxy
    spec:
      serviceAccountName: uproxy
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: istio-proxy
        image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
        imagePullPolicy: Always
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
        readinessProbe:
          httpGet:
            port: 15020 # TODO: use 15021, but it spams logs
            path: /healthz/ready
        args:
        - proxy
        - sidecar
        env:
        - name: ISTIO_META_GENERATOR
          value: "uproxy-envoy"
        - name: ISTIO_META_SIDECARLESS_TYPE
          value: "uproxy"
        - name: CREDENTIAL_FETCHER_TYPE
          value: "TokenRequest"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        volumeMounts:
        - mountPath: /var/run/secrets/istio
          name: istiod-ca-cert
        - mountPath: /var/run/secrets/tokens
          name: istio-token
        - mountPath: /var/lib/kubelet/pki # Must match due to symlinks...
          name: kubelet-creds
      volumes:
      - name: kubelet-creds
        hostPath:
          path: /var/lib/kubelet/pki
      - name: istio-token
        projected:
          sources:
          - serviceAccountToken:
              path: istio-token
              expirationSeconds: 43200
              audience: istio-ca
      - name: istiod-ca-cert
        configMap:
          name: istio-ca-root-cert
{{- else }}
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: uproxy
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: uproxy
  template:
    metadata:
      labels:
        app: uproxy
        asm-type: proxy
    spec:
      serviceAccountName: uproxy
      initContainers:
      - name: istio-init
        image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
        securityContext:
          privileged: true
          capabilities:
            add:
            - NET_ADMIN
        command:
          - sh
          - -c
          - |
            # HBONE traffic goes to HBONE port...
            iptables -t nat -A PREROUTING -p tcp --dport 15008 ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j LOG --log-prefix="[howardjohn 15008] "
            iptables -t nat -A PREROUTING -p tcp --dport 15008 ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j REDIRECT --to-ports 15008
            # Special logic to handle the case where we have a remote proxy (no interception) and server (interception) on the node
            # Without this, packets from remote proxy -> server would not go through uProxy, but the response would, causing breakage.
            # This ensures the response does not go through uProxy
            iptables -t nat -A PREROUTING -m state --state NEW -p tcp --tcp-flags ACK ACK ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j LOG --log-prefix="[howardjohn remote] "
            iptables -t nat -A PREROUTING -m state --state NEW -p tcp --tcp-flags ACK ACK ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j ACCEPT
            # Send everything else through the "outbound" port. For now, DPv2 cannot distinguish inbound vs outbound, so we
            # do some (semi-reliable) heuristics on the outbound port to treat it as inbound, when needed. Typically inbound is
            # HBONE though.
            iptables -t nat -A PREROUTING -p tcp ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j LOG --log-prefix="[howardjohn outbound] "
            iptables -t nat -A PREROUTING -p tcp ! -s $INSTANCE_IP ! -d $INSTANCE_IP  -j REDIRECT --to-ports 15001

            iptables -t nat -I OUTPUT 1 -p tcp --dport 15088 -j LOG --log-prefix="[howardjohn local] "
            iptables -t nat -I OUTPUT 1 -p tcp --dport 15088 -j REDIRECT --to-port 15008
        env:
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
      containers:
      - name: istio-proxy
        image: "{{ .Values.global.hub }}/{{ .Values.global.proxy.image }}:{{ .Values.global.tag }}"
        readinessProbe:
          httpGet:
            port: 15020 # TODO: use 15021, but it spams logs
            path: /healthz/ready
        args:
        - proxy
        - sidecar
        env:
        - name: ISTIO_META_GENERATOR
          value: "uproxy-envoy"
        - name: ISTIO_META_SIDECARLESS_TYPE
          value: "uproxy"
        - name: CREDENTIAL_FETCHER_TYPE
          value: "TokenRequest"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: INSTANCE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: SERVICE_ACCOUNT
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: ISTIO_META_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        volumeMounts:
        - mountPath: /var/run/secrets/istio
          name: istiod-ca-cert
        - mountPath: /var/run/secrets/tokens
          name: istio-token
        - mountPath: /var/lib/kubelet/pki # Must match due to symlinks...
          name: kubelet-creds
        securityContext:
          privileged: true
          capabilities:
            add:
            - NET_ADMIN
      volumes:
      - name: kubelet-creds
        hostPath:
          path: /var/lib/kubelet/pki
      - name: istio-token
        projected:
          sources:
          - serviceAccountToken:
              path: istio-token
              expirationSeconds: 43200
              audience: istio-ca
      - name: istiod-ca-cert
        configMap:
          name: istio-ca-root-cert
{{- end }}